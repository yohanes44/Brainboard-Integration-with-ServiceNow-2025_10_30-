<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_854636_b_board.BrainboardUtility</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>BrainboardUtility</name>
        <sandbox_callable>true</sandbox_callable>
        <script><![CDATA[var BrainboardUtility = Class.create();

BrainboardUtility.variableSets = [
	{
		sys_id: "f4c1942bc3af22107e68b41ed40131cd",
		order: 100,
		description: "Widget Item"
	},
	{
		sys_id: "52b414ebc3af22107e68b41ed40131f4",
		order: 300,
		description: "Variables"
	},
	{
		sys_id: "17459cafc3af22107e68b41ed4013110",
		order: 200,
		description: "Project & Environment"
	}
];

BrainboardUtility.catItemCategory = "aab5abdb53b46210e80451a0a0490e09";
BrainboardUtility.catItemCatalog = "cdb42f1b53b46210e80451a0a0490e0e";
BrainboardUtility.token = gs.getProperty("x_854636_b_board.api.token");
BrainboardUtility.portalTopic = "3833c87f473062506161e99b116d43d4";
BrainboardUtility.clone_architecture_tpl_flow = "3bbb5fea837462103e53f065eeaad3bc";



BrainboardUtility.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {


	cleanArchTemplates: function () {
		function isAssociatedWithArchTpl(catalogItemSysID) {
			var grArch = new GlideRecord('x_854636_b_board_architecture_template');
			grArch.addQuery("catalog_item", catalogItemSysID);
			grArch.setLimit(1);
			grArch.query();
			return grArch.hasNext(); // simpler than using a while-loop
		}

		try {
			var grCatItem = new GlideRecord('sc_cat_item_producer');
			grCatItem.addEncodedQuery("sys_scope=7062797e832822103e53f065eeaad32b");
			grCatItem.query();

			while (grCatItem.next()) {
				var catalogItemSysId = grCatItem.getUniqueValue();
				var isAssociated = isAssociatedWithArchTpl(catalogItemSysId);

				if (!isAssociated) {
					gs.info("[CLEANUP] Removing catalog item: " + grCatItem.name);

					// Delete related io_set_item_list records (variables)
					var grVarItemList = new GlideRecord("item_option_new");
					grVarItemList.addQuery('cat_item', catalogItemSysId);
					grVarItemList.query();
					while (grVarItemList.next()) {
						grVarItemList.deleteRecord();
					}

					// Delete related io_set_item_set records (catalog item â†” variable set connector)
					var grVarItemSet = new GlideRecord("io_set_item");
					grVarItemSet.addQuery('sc_cat_item', catalogItemSysId);
					grVarItemSet.query();
					while (grVarItemSet.next()) {
						grVarItemSet.deleteRecord();
					}

					// Delete related m2m records
					var grConnectedContent = new GlideRecord("m2m_connected_content");
					grConnectedContent.addQuery('catalog_item', catalogItemSysId);
					grConnectedContent.query();
					while (grConnectedContent.next()) {
						grConnectedContent.deleteRecord();
					}

					// Finally, delete the catalog item itself
					grCatItem.deleteRecord();

				} else {
					gs.info("[KEEP] Catalog item: " + grCatItem.name);
				}
			}

		} catch (error) {
			gs.error("ERROR ScriptInclude - BrainboardUtility.cleanArchTemplates: " + error.message);
		}
	},

	syncVariable: function (architecture) {
		var apiKey = gs.getProperty('x_854636_b_board.' + architecture.apiType + '_api_token');
		var r = new sn_ws.RESTMessageV2('x_854636_b_board.Brainboard - ' + architecture.apiType, 'ListVariables');
		r.setStringParameterNoEscape('architectureUUID', architecture.uuid);
		r.setStringParameterNoEscape('token', apiKey);
		var response = r.execute();
		var responseBody = "" + response.getBody();
		var httpStatus = response.getStatusCode();
		var resp = global.JSON.parse(responseBody);

		for (var i = 0; i < resp.length; i++) {
			var variableExist = this.variableExist(resp[i], architecture.sys_id);
			if (variableExist) {
				this.updateVariable(resp[i], architecture.sys_id);
			} else {
				this.createVariable(resp[i], architecture.sys_id, architecture.apiType);
			}
		}
	},

	removeArchTemplate: function (archSysIds) {
		try {
			var arch_tpl_sysId = (archSysIds) ? archSysIds : this.getParameter("sysparm_archSysIds");
			var grArch = new GlideRecord('x_854636_b_board_architecture_template');
			grArch.addEncodedQuery("sys_idIN" + arch_tpl_sysId);
			grArch.query();
			while (grArch.next()) {
				gs.eventQueue("x_854636_b_board.delete arch template", grArch, grArch.sys_id, "");
			}
		} catch (error) {
			gs.info("ERROR ScriptInclude - BrainboardUtility:- " + error.message);
		}
	},

	getAllProjects: function () {
		var projectGr = new GlideRecord("x_854636_b_board_project");
		projectGr.query();
		var projects = [];
		while (projectGr.next()) {
			projects.push({
				uuid: projectGr.getValue("uuid"),
				sys_id: projectGr.getValue("sys_id"),
			});
		}
		return projects;
	},

	getAllArchitectureTemplates: function () {
		var architectureTplGr = new GlideRecord("x_854636_b_board_architecture_template");
		architectureTplGr.query();
		var architectureTemplates = [];
		while (architectureTplGr.next()) {
			architectureTemplates.push({
				uuid: architectureTplGr.getValue("uuid"),
				sys_id: architectureTplGr.getValue("sys_id"),
			});
		}
		return architectureTemplates;
	},

	getArchitectureTemplateGR: function (archTplSysId) {
		var gr = new GlideRecord("x_854636_b_board_architecture_template");
		if (gr.get(archTplSysId)) {
			return gr;
		}
	},

	getArchitectureTemplate: function () {
		var catItemSysId = this.getParameter("sysparm_catItemSysId");
		var gr = new GlideRecord("x_854636_b_board_architecture_template");
		gr.addQuery("catalog_item", catItemSysId);
		gr.query();
		gr.setLimit(1);
		while (gr.next()) {
			return JSON.stringify({
				name: gr.getValue("name"),
				uuid: gr.getValue("uuid"),
				clone_count: gr.getValue("clone_count"),
				visibility: gr.getValue("visibility"),
				status: gr.getValue("status"),
				description: gr.getValue("description"),
				readme: gr.getValue("readme"),
				snapshot_url: gr.getValue("snapshot_url"),
				thumbnail_url: gr.getValue("thumbnail_url"),
			});
		}
	},

	createVariable: function (data, archTplSysId, apiType) {
		var brainboardVariableGr = new GlideRecord("x_854636_b_board_variable");
		brainboardVariableGr.initialize();
		brainboardVariableGr.setValue("sys_scope", "7062797e832822103e53f065eeaad32b");
		brainboardVariableGr.setValue("mandatry", data.mandatry);
		brainboardVariableGr.setValue("architecture_template", archTplSysId);
		brainboardVariableGr.setValue("value", data.value);
		brainboardVariableGr.setValue("type", data.type);
		brainboardVariableGr.setValue("description", data.description);
		brainboardVariableGr.setValue("default", data.default);
		brainboardVariableGr.setValue("name", data.name);
		brainboardVariableGr.setValue("id", data.uuid);
		brainboardVariableGr.setValue("api_type", apiType);
		var createdbrainboardVariableSysId = brainboardVariableGr.insert();

		var catVariableGr = new GlideRecord("item_option_new");
		catVariableGr.initialize();
		catVariableGr.setValue("sys_scope", "7062797e832822103e53f065eeaad32b");
		catVariableGr.type = "6";
		catVariableGr.mandatory = brainboardVariableGr.getValue("mandatry");
		catVariableGr.question_text = brainboardVariableGr.getValue("name");
		catVariableGr.name = brainboardVariableGr.getValue("name");
		catVariableGr.order = 400;
		catVariableGr.cat_item = brainboardVariableGr.architecture_template.catalog_item;
		var createdCatVariableSysId = catVariableGr.insert();

		var brainboardvarGr = new GlideRecord("x_854636_b_board_variable");
		if (brainboardvarGr.get(createdbrainboardVariableSysId)) {
			brainboardvarGr.catalog_variable = createdCatVariableSysId;
			brainboardvarGr.update();
		}
	},

	updateVariable: function (data, archTplSysId) {
		var variableGr = new GlideRecord("x_854636_b_board_variable");
		if (variableGr.get("id", data.uuid)) {
			variableGr.setValue("mandatry", data.mandatry);
			variableGr.setValue("architecture_template", archTplSysId);
			variableGr.setValue("value", data.value);
			variableGr.setValue("type", data.type);
			variableGr.setValue("description", data.description);
			variableGr.setValue("default", data.default);
			variableGr.setValue("name", data.name);
			variableGr.setValue("id", data.uuid);
			variableGr.update();
		}
	},

	filterEnvironments: function (projectSysId) {
		var environmentGr = new GlideRecord("x_854636_b_board_environment");
		environmentGr.addQuery("project", projectSysId);
		environmentGr.query();
		var envIDs = [];
		while (environmentGr.next()) {
			envIDs.push(environmentGr.sys_id.toString());
		}
		return 'sys_idIN' + envIDs.join(',');
	},

	generatePayload: function (clnTplTaskSysId) {
		var clnTplTaskGR = new GlideRecord("x_854636_b_board_clone_template_task");
		if (clnTplTaskGR.get(clnTplTaskSysId)) {
			var projectUUID = null;
			var projectGR = new GlideRecord("x_854636_b_board_project");
			if (projectGR.get(clnTplTaskGR.variables.selectedProject.toString())) {
				projectUUID = projectGR.getValue("uuid");
			}

			var environmentUUID = null;
			var environmentUUIDGR = new GlideRecord("x_854636_b_board_environment");
			if (environmentUUIDGR.get(clnTplTaskGR.variables.selectedEnvironment.toString())) {
				environmentUUID = environmentUUIDGR.getValue("uuid");
			}

			var archTplUUID = clnTplTaskGR.variables.uuid.toString();
			var payload = {
				"description": clnTplTaskGR.variables.architectureTemplateDescription.toString(),
				"environment": environmentUUID,
				"name": clnTplTaskGR.variables.architectureTemplateName.toString(),
				"project": projectUUID,
				"variable_values": {
				}
			};
			var variableGr = new GlideRecord("x_854636_b_board_variable");
			variableGr.addQuery("architecture_template.uuid", archTplUUID);
			variableGr.query();
			while (variableGr.next()) {
				var varLabel = variableGr.catalog_variable.name;
				payload.variable_values[variableGr.name] = clnTplTaskGR.variables[varLabel].toString();
			}
			return JSON.stringify(payload);
		}
	},

	getArchTplFieldValue: function (archTplUUID, fieldName) {
		var archTplGr = new GlideRecord("x_854636_b_board_architecture_template");
		if (archTplGr.get("uuid", archTplUUID)) {
			return archTplGr.getValue(fieldName);
		}
	},

	cloneArchitectureTemplate: function (apiType, payload, archTemplateUuid) {
		try {
			var r = new sn_ws.RESTMessageV2('x_854636_b_board.Brainboard - ' + apiType, 'Clone Architecture Template');
			r.setStringParameterNoEscape('template', archTemplateUuid);
			r.setStringParameterNoEscape('payload', payload);
			r.setStringParameterNoEscape('token', BrainboardUtility.token);

			var response = r.execute();
			var responseBody = response.getBody();
			var httpStatus = response.getStatusCode();

			if (httpStatus >= 200 && httpStatus < 300) {
				return {
					success: true,
					status: httpStatus,
					body: JSON.parse(responseBody)
				};
			} else {
				var errorCode = "";
				try {
					var parsed = JSON.parse(responseBody || "{}");
					if (parsed.error_code) {
						errorCode = parsed.error_code;
					} else if (parsed.message) {
						// Sometimes APIs return "message" instead of "error_code"
						errorCode = parsed.message;
					}
				} catch (e) {
					// responseBody wasnâ€™t valid JSON, fallback to raw body
					errorCode = responseBody;
				}

				return {
					success: false,
					status: httpStatus,
					error: httpStatus + " " + errorCode
				};
			}
		} catch (error) {
			gs.info("ScriptInclude ERROR - BrainboardUtility - cloneArchitectureTemplate == " + error.message);
			return {
				success: false,
				error: error.message
			};
		}
	},

	createCatalogItem: function (archTplSysId, iconImageAttachment, pictureImageAttachment) {
		var archTplGr = this.getArchitectureTemplateGR(archTplSysId);

		var rp = new GlideRecord("sc_cat_item_producer");
		rp.initialize();
		rp.setValue("sys_scope", "7062797e832822103e53f065eeaad32b");
		rp.name = archTplGr.getValue("name");
		rp.short_description = archTplGr.getValue("name");
		rp.description = archTplGr.getValue("description");
		rp.table_name = "x_854636_b_board_clone_template_task";
		rp.catalog = "e0d08b13c0a8016400a5f79be54a0ed2";
		rp.category = BrainboardUtility.catItemCategory;
		rp.script = 'current.project = producer.selectedProject;\n' +
			'current.environment = producer.selectedEnvironment;';
		rp.active = true;
		rp.icon = iconImageAttachment;
		rp.picture = pictureImageAttachment;
		rp.no_attachment_v2 = true;
		rp.no_save_as_draft = true;
		var rpSysId = rp.insert();

		var mtmCon = new GlideRecord("m2m_connected_content");
		mtmCon.initialize();
		mtmCon.setValue("topic", BrainboardUtility.portalTopic);
		mtmCon.setValue("content_type", "98f9a16553622010069addeeff7b1248");
		mtmCon.setValue("catalog_item", rpSysId);
		mtmCon.insert();

		archTplGr.setValue("catalog_item", rpSysId);
		archTplGr.update();

		// attach the variables sets to the cat item
		BrainboardUtility.variableSets.forEach(function (variableSet) {
			var variableSetGr = new GlideRecord("io_set_item");
			variableSetGr.initialize();
			variableSetGr.setValue("sys_scope", "7062797e832822103e53f065eeaad32b");
			variableSetGr.variable_set = variableSet.sys_id;
			variableSetGr.sc_cat_item = rpSysId;
			variableSetGr.order = variableSet.order;
			variableSetGr.insert();
		});

		var containerStartGr = new GlideRecord("item_option_new");
		containerStartGr.initialize();
		containerStartGr.setValue("sys_scope", "7062797e832822103e53f065eeaad32b");
		containerStartGr.type = "19";
		containerStartGr.question_text = "Variables";
		containerStartGr.name = "variables";
		containerStartGr.order = "390";
		containerStartGr.display_title = true;
		containerStartGr.cat_item = rpSysId;
		containerStartGr.insert();

		var formatterBreakGr = new GlideRecord("item_option_new");
		formatterBreakGr.initialize();
		formatterBreakGr.setValue("sys_scope", "7062797e832822103e53f065eeaad32b");
		formatterBreakGr.type = "12";
		formatterBreakGr.order = "380";
		formatterBreakGr.cat_item = rpSysId;
		formatterBreakGr.insert();

	},

	attachImage: function (tableName, recordSysId, fileName, imageURL) {
		var request = new sn_ws.RESTMessageV2();
		request.setHttpMethod("get");
		request.setEndpoint(imageURL);
		request.saveResponseBodyAsAttachment(tableName, recordSysId, fileName);
		var response = request.execute();
		var httpStatus = response.getStatusCode();
		return response.getResponseAttachmentSysid();
	},


	variableExist: function (data, architectureTplSysId) {
		var variableGr = new GlideRecord("x_854636_b_board_variable");
		variableGr.addQuery("name", data.name);
		variableGr.addQuery("architecture_template", architectureTplSysId);
		variableGr.setLimit(1);
		variableGr.query();
		var answer = false;
		while (variableGr.next()) {
			answer = true;
		}
		return answer;
	},

	type: 'BrainboardUtility'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>yohanes.yilma</sys_created_by>
        <sys_created_on>2025-04-02 09:57:22</sys_created_on>
        <sys_id>e19347df83e4e2103e53f065eeaad3da</sys_id>
        <sys_mod_count>186</sys_mod_count>
        <sys_name>BrainboardUtility</sys_name>
        <sys_package display_value="Brainboard" source="x_854636_b_board">7062797e832822103e53f065eeaad32b</sys_package>
        <sys_policy/>
        <sys_scope display_value="Brainboard">7062797e832822103e53f065eeaad32b</sys_scope>
        <sys_update_name>sys_script_include_e19347df83e4e2103e53f065eeaad3da</sys_update_name>
        <sys_updated_by>yohanes.yilma</sys_updated_by>
        <sys_updated_on>2025-09-11 10:43:45</sys_updated_on>
    </sys_script_include>
</record_update>
